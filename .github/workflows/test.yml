name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Run property tests
      run: npm run test:property
    
    - name: Run snapshot tests
      run: npm run test:snapshots
    
    - name: Generate coverage report
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Check coverage thresholds
      run: npm run test:coverage:check
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run regression test suite
      run: npm run test:regression
    
    - name: Validate core requirements
      run: |
        echo "Validating core requirements..."
        npm run test -- --reporter=json > test-results.json
        
        # 要件1チェック: 根拠なし自動埋め防止
        if grep -q "prevent autofill" test-results.json; then
          echo "✅ 要件1: 根拠なし自動埋め防止 - PASS"
        else
          echo "❌ 要件1: 根拠なし自動埋め防止 - FAIL"
          exit 1
        fi
        
        # 要件2チェック: overflow/underflow防止
        if grep -q "exact question count" test-results.json; then
          echo "✅ 要件2: 出力項目数制御 - PASS"
        else
          echo "❌ 要件2: 出力項目数制御 - FAIL"
          exit 1
        fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: npm run test:performance
    
    - name: Performance regression check
      run: |
        echo "Checking performance metrics..."
        # 100問処理が1秒以内に完了することを確認
        npm run test:performance -- --grep "100問での処理時間"

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security tests
      run: npm run test:security
    
    - name: Injection attack resistance
      run: |
        echo "Testing injection attack resistance..."
        npm run test -- --grep "注入攻撃"
    
    - name: Run dependency audit
      run: npm audit --audit-level=high